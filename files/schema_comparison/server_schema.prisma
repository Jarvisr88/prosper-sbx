generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("USER")
  employeeId    Int?      @unique
  isActive      Boolean   @default(true)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  employee Employee? @relation(fields: [employeeId], references: [id])

  @@map("users")
}

model Employee {
  id         Int      @id @default(autoincrement()) @map("employee_id")
  name       String   @map("employee_name")
  managerId  Int?     @map("manager_id")
  department String?
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  manager            Employee?             @relation("EmployeeToManager", fields: [managerId], references: [id])
  employees          Employee[]            @relation("EmployeeToManager")
  performanceMetrics PerformanceMetric[]
  feedbackReceived   PerformanceFeedback[] @relation("EmployeeFeedback")
  feedbackGiven      PerformanceFeedback[] @relation("ProviderFeedback")

  user User?

  @@map("employee_manager_hierarchy")
}

model PerformanceMetric {
  id          Int      @id @default(autoincrement()) @map("metric_id")
  employeeId  Int      @map("employee_id")
  category    String
  score       Decimal  @db.Decimal(5, 2)
  periodStart DateTime @map("period_start")
  periodEnd   DateTime @map("period_end")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  employee Employee @relation(fields: [employeeId], references: [id])

  @@map("performance_metrics")
}

model PerformanceFeedback {
  id           Int      @id @default(autoincrement()) @map("feedback_id")
  employeeId   Int      @map("employee_id")
  providerId   Int      @map("provider_id")
  category     String
  feedbackType String   @map("feedback_type")
  content      String
  feedbackDate DateTime @map("feedback_date")
  impactRating Decimal? @map("impact_rating") @db.Decimal(5, 2)
  createdAt    DateTime @default(now()) @map("created_at")

  employee Employee @relation("EmployeeFeedback", fields: [employeeId], references: [id])
  provider Employee @relation("ProviderFeedback", fields: [providerId], references: [id])

  @@map("performance_feedback")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
