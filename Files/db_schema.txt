-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public."User"
(
    id text COLLATE pg_catalog."default" NOT NULL,
    email text COLLATE pg_catalog."default",
    name text COLLATE pg_catalog."default",
    role text COLLATE pg_catalog."default" NOT NULL DEFAULT 'user'::text,
    "createdAt" timestamp(3) without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" timestamp(3) without time zone NOT NULL,
    "emailVerified" timestamp(3) without time zone,
    "employeeId" integer,
    image text COLLATE pg_catalog."default",
    "isActive" boolean NOT NULL DEFAULT true,
    "lastLogin" timestamp(3) without time zone,
    "userId" integer,
    CONSTRAINT "User_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public._prisma_migrations
(
    id character varying(36) COLLATE pg_catalog."default" NOT NULL,
    checksum character varying(64) COLLATE pg_catalog."default" NOT NULL,
    finished_at timestamp with time zone,
    migration_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    logs text COLLATE pg_catalog."default",
    rolled_back_at timestamp with time zone,
    started_at timestamp with time zone NOT NULL DEFAULT now(),
    applied_steps_count integer NOT NULL DEFAULT 0,
    CONSTRAINT _prisma_migrations_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.access_control
(
    access_id serial NOT NULL,
    role_name character varying(100) COLLATE pg_catalog."default",
    permissions jsonb,
    description text COLLATE pg_catalog."default",
    active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT access_control_pkey PRIMARY KEY (access_id)
);

CREATE TABLE IF NOT EXISTS public.achievement_badges
(
    badge_id serial NOT NULL,
    employee_id integer,
    badge_name character varying(100) COLLATE pg_catalog."default",
    category character varying(50) COLLATE pg_catalog."default",
    awarded_date date,
    criteria_met jsonb,
    visibility character varying(50) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT achievement_badges_pkey PRIMARY KEY (badge_id)
);

CREATE TABLE IF NOT EXISTS public.achievement_tracking
(
    achievement_id serial NOT NULL,
    achievement_type character varying(50) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    criteria jsonb,
    points integer,
    badge_image_url text COLLATE pg_catalog."default",
    CONSTRAINT achievement_tracking_pkey PRIMARY KEY (achievement_id)
);

CREATE TABLE IF NOT EXISTS public.action_items
(
    item_id serial NOT NULL,
    employee_id integer,
    assigned_by integer,
    category character varying(50) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    due_date date,
    priority character varying(20) COLLATE pg_catalog."default",
    status character varying(50) COLLATE pg_catalog."default",
    completion_date date,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT action_items_pkey PRIMARY KEY (item_id)
);

CREATE TABLE IF NOT EXISTS public.alert_configuration
(
    alert_id serial NOT NULL,
    alert_type character varying(50) COLLATE pg_catalog."default",
    threshold_value numeric(5, 2),
    frequency character varying(20) COLLATE pg_catalog."default",
    recipients jsonb,
    active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    last_triggered timestamp without time zone,
    CONSTRAINT alert_configuration_pkey PRIMARY KEY (alert_id)
);

CREATE TABLE IF NOT EXISTS public.alert_notifications
(
    notification_id serial NOT NULL,
    alert_id integer,
    recipient_id integer,
    notification_type character varying(50) COLLATE pg_catalog."default",
    sent_at timestamp without time zone,
    acknowledged_at timestamp without time zone,
    CONSTRAINT alert_notifications_pkey PRIMARY KEY (notification_id)
);

CREATE TABLE IF NOT EXISTS public.analytics_dashboard
(
    dashboard_id serial NOT NULL,
    dashboard_name character varying(100) COLLATE pg_catalog."default",
    metrics jsonb[],
    refresh_frequency character varying(50) COLLATE pg_catalog."default",
    last_updated timestamp without time zone,
    access_roles text[] COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT analytics_dashboard_pkey PRIMARY KEY (dashboard_id)
);

CREATE TABLE IF NOT EXISTS public.api_endpoints
(
    endpoint_id bigserial NOT NULL,
    endpoint_name text COLLATE pg_catalog."default" NOT NULL,
    endpoint_path text COLLATE pg_catalog."default" NOT NULL,
    method text COLLATE pg_catalog."default" NOT NULL,
    is_active boolean DEFAULT true,
    rate_limit integer,
    auth_required boolean DEFAULT true,
    response_cache_ttl interval,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT api_endpoints_pkey PRIMARY KEY (endpoint_id)
);

CREATE TABLE IF NOT EXISTS public.api_keys
(
    key_id bigserial NOT NULL,
    api_key text COLLATE pg_catalog."default" NOT NULL,
    client_name text COLLATE pg_catalog."default" NOT NULL,
    is_active boolean DEFAULT true,
    permissions jsonb,
    rate_limit integer,
    expires_at timestamp without time zone,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    last_used_at timestamp without time zone,
    CONSTRAINT api_keys_pkey PRIMARY KEY (key_id),
    CONSTRAINT api_keys_api_key_key UNIQUE (api_key)
);

CREATE TABLE IF NOT EXISTS public.api_requests
(
    request_id bigserial NOT NULL,
    endpoint_id bigint,
    api_key_id bigint,
    request_timestamp timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    response_time interval,
    status_code integer,
    request_details jsonb,
    response_details jsonb,
    CONSTRAINT api_requests_pkey PRIMARY KEY (request_id)
);

CREATE TABLE IF NOT EXISTS public.audit_log
(
    log_id serial NOT NULL,
    entity_type character varying(50) COLLATE pg_catalog."default",
    entity_id integer,
    action_type character varying(50) COLLATE pg_catalog."default",
    action_date timestamp without time zone,
    performed_by integer,
    old_values jsonb,
    new_values jsonb,
    ip_address character varying(50) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT audit_log_pkey PRIMARY KEY (log_id)
);

CREATE TABLE IF NOT EXISTS public.automation_workflows
(
    workflow_id bigserial NOT NULL,
    workflow_name text COLLATE pg_catalog."default" NOT NULL,
    workflow_type text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    trigger_type text COLLATE pg_catalog."default" NOT NULL,
    trigger_config jsonb NOT NULL,
    steps jsonb NOT NULL,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    last_run timestamp without time zone,
    CONSTRAINT automation_workflows_pkey PRIMARY KEY (workflow_id)
);

CREATE TABLE IF NOT EXISTS public.backup_catalog
(
    backup_id bigserial NOT NULL,
    backup_type text COLLATE pg_catalog."default" NOT NULL,
    start_time timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    end_time timestamp without time zone,
    status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'IN_PROGRESS'::text,
    size_bytes bigint,
    backup_location text COLLATE pg_catalog."default",
    metadata jsonb,
    CONSTRAINT backup_catalog_pkey PRIMARY KEY (backup_id)
);

CREATE TABLE IF NOT EXISTS public.backup_configurations
(
    config_id bigserial NOT NULL,
    config_name text COLLATE pg_catalog."default" NOT NULL,
    backup_type text COLLATE pg_catalog."default" NOT NULL,
    schedule_expression text COLLATE pg_catalog."default",
    retention_period interval,
    storage_location text COLLATE pg_catalog."default" NOT NULL,
    compression_type text COLLATE pg_catalog."default" DEFAULT 'GZIP'::text,
    encryption_config jsonb,
    pre_backup_script text COLLATE pg_catalog."default",
    post_backup_script text COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT backup_configurations_pkey PRIMARY KEY (config_id)
);

CREATE TABLE IF NOT EXISTS public.backup_files
(
    file_id bigserial NOT NULL,
    backup_id bigint,
    file_path text COLLATE pg_catalog."default" NOT NULL,
    file_type text COLLATE pg_catalog."default" NOT NULL,
    file_size bigint NOT NULL,
    checksum text COLLATE pg_catalog."default" NOT NULL,
    compression_type text COLLATE pg_catalog."default" NOT NULL,
    is_encrypted boolean DEFAULT false,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    metadata jsonb,
    CONSTRAINT backup_files_pkey PRIMARY KEY (file_id)
);

CREATE TABLE IF NOT EXISTS public.backup_history
(
    backup_id bigserial NOT NULL,
    config_id bigint,
    backup_start timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    backup_end timestamp without time zone,
    backup_type text COLLATE pg_catalog."default" NOT NULL,
    status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'RUNNING'::text,
    file_location text COLLATE pg_catalog."default",
    file_size bigint,
    checksum text COLLATE pg_catalog."default",
    error_details jsonb,
    metadata jsonb,
    CONSTRAINT backup_history_pkey PRIMARY KEY (backup_id)
);

CREATE TABLE IF NOT EXISTS public.backup_verification_log
(
    verification_id bigserial NOT NULL,
    backup_id bigint,
    verification_time timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    verification_status text COLLATE pg_catalog."default" NOT NULL,
    verification_details jsonb,
    CONSTRAINT backup_verification_log_pkey PRIMARY KEY (verification_id)
);

CREATE TABLE IF NOT EXISTS public.baseline_measurements
(
    baseline_id serial NOT NULL,
    employee_id integer,
    measurement_date date,
    kpi_category character varying(50) COLLATE pg_catalog."default",
    initial_score numeric(5, 2),
    CONSTRAINT baseline_measurements_pkey PRIMARY KEY (baseline_id)
);

CREATE TABLE IF NOT EXISTS public.capacity_planning
(
    planning_id serial NOT NULL,
    team_id integer,
    period_start date,
    period_end date,
    total_capacity integer,
    allocated_capacity integer,
    available_capacity integer,
    skills_distribution jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT capacity_planning_pkey PRIMARY KEY (planning_id)
);

CREATE TABLE IF NOT EXISTS public.career_development_plans
(
    plan_id serial NOT NULL,
    employee_id integer,
    role_current character varying(100) COLLATE pg_catalog."default",
    role_target character varying(100) COLLATE pg_catalog."default",
    timeline_months integer,
    development_areas jsonb[],
    progress_status character varying(50) COLLATE pg_catalog."default",
    review_dates date[],
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT career_development_plans_pkey PRIMARY KEY (plan_id)
);

CREATE TABLE IF NOT EXISTS public.career_progression
(
    progression_id serial NOT NULL,
    employee_id integer,
    level_start character varying(50) COLLATE pg_catalog."default",
    level_current character varying(50) COLLATE pg_catalog."default",
    progression_start_date date DEFAULT CURRENT_DATE,
    last_promotion_date date,
    skills_acquired jsonb[],
    achievements jsonb[],
    next_level_requirements jsonb,
    CONSTRAINT career_progression_pkey PRIMARY KEY (progression_id)
);

CREATE TABLE IF NOT EXISTS public.certification_registry
(
    cert_id serial NOT NULL,
    employee_id integer,
    certification_name character varying(100) COLLATE pg_catalog."default",
    category character varying(50) COLLATE pg_catalog."default",
    achievement_date date,
    expiry_date date,
    status character varying(20) COLLATE pg_catalog."default",
    score numeric(5, 2),
    verification_url text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT certification_registry_pkey PRIMARY KEY (cert_id)
);

CREATE TABLE IF NOT EXISTS public.communication_log
(
    log_id serial NOT NULL,
    template_id integer,
    recipient_id integer,
    sent_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    delivery_status character varying(50) COLLATE pg_catalog."default",
    open_status boolean DEFAULT false,
    response_tracking jsonb,
    CONSTRAINT communication_log_pkey PRIMARY KEY (log_id)
);

CREATE TABLE IF NOT EXISTS public.communication_metrics
(
    metric_id serial NOT NULL,
    employee_id integer,
    communication_type character varying(50) COLLATE pg_catalog."default",
    frequency integer,
    effectiveness_score numeric(5, 2),
    measurement_period character varying(50) COLLATE pg_catalog."default",
    feedback_received jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT communication_metrics_pkey PRIMARY KEY (metric_id)
);

CREATE TABLE IF NOT EXISTS public.communication_templates
(
    template_id serial NOT NULL,
    template_type character varying(100) COLLATE pg_catalog."default",
    subject_template text COLLATE pg_catalog."default",
    body_template text COLLATE pg_catalog."default",
    variables jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    last_modified timestamp without time zone,
    CONSTRAINT communication_templates_pkey PRIMARY KEY (template_id)
);

CREATE TABLE IF NOT EXISTS public.competency_framework
(
    framework_id serial NOT NULL,
    category character varying(50) COLLATE pg_catalog."default",
    level integer,
    required_skills jsonb,
    performance_indicators jsonb[],
    assessment_criteria jsonb,
    development_path jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT competency_framework_pkey PRIMARY KEY (framework_id)
);

CREATE TABLE IF NOT EXISTS public.configuration_history
(
    history_id bigserial NOT NULL,
    config_id bigint,
    previous_value text COLLATE pg_catalog."default",
    new_value text COLLATE pg_catalog."default",
    changed_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    changed_by text COLLATE pg_catalog."default" NOT NULL,
    change_reason text COLLATE pg_catalog."default",
    change_metadata jsonb,
    CONSTRAINT configuration_history_pkey PRIMARY KEY (history_id)
);

CREATE TABLE IF NOT EXISTS public.custom_reports
(
    report_id serial NOT NULL,
    report_name character varying(100) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    query_parameters jsonb,
    schedule character varying(50) COLLATE pg_catalog."default",
    recipients text[] COLLATE pg_catalog."default",
    last_run timestamp without time zone,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT custom_reports_pkey PRIMARY KEY (report_id)
);

CREATE TABLE IF NOT EXISTS public.customer_success_metrics
(
    metric_id serial NOT NULL,
    employee_id integer,
    escalation_resolution_rate numeric(5, 2),
    business_expansion_impact numeric(10, 2),
    service_quality_score numeric(5, 2),
    measurement_period character varying(50) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT customer_success_metrics_pkey PRIMARY KEY (metric_id)
);

CREATE TABLE IF NOT EXISTS public.dashboard_color_scheme
(
    scheme_id serial NOT NULL,
    element_type character varying(50) COLLATE pg_catalog."default",
    color_code character varying(7) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    CONSTRAINT dashboard_color_scheme_pkey PRIMARY KEY (scheme_id)
);

CREATE TABLE IF NOT EXISTS public.dashboard_configuration
(
    config_id serial NOT NULL,
    dashboard_type character varying(50) COLLATE pg_catalog."default",
    layout_settings jsonb,
    visible_kpis jsonb,
    refresh_interval integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    last_modified timestamp without time zone,
    CONSTRAINT dashboard_configuration_pkey PRIMARY KEY (config_id)
);

CREATE TABLE IF NOT EXISTS public.department
(
    department_id serial NOT NULL,
    department_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    parent_department_id integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    active boolean DEFAULT true,
    CONSTRAINT department_pkey PRIMARY KEY (department_id)
);

CREATE TABLE IF NOT EXISTS public.deployment_steps
(
    step_id bigserial NOT NULL,
    deployment_id bigint,
    step_number integer NOT NULL,
    step_type text COLLATE pg_catalog."default" NOT NULL,
    status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'PENDING'::text,
    started_at timestamp without time zone,
    completed_at timestamp without time zone,
    sql_command text COLLATE pg_catalog."default",
    execution_result jsonb,
    CONSTRAINT deployment_steps_pkey PRIMARY KEY (step_id)
);

CREATE TABLE IF NOT EXISTS public.deployments
(
    deployment_id bigserial NOT NULL,
    version text COLLATE pg_catalog."default" NOT NULL,
    deployment_type text COLLATE pg_catalog."default" NOT NULL,
    status text COLLATE pg_catalog."default" NOT NULL,
    started_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    completed_at timestamp without time zone,
    deployed_by text COLLATE pg_catalog."default" NOT NULL,
    deployment_plan jsonb NOT NULL,
    rollback_plan jsonb,
    CONSTRAINT deployments_pkey PRIMARY KEY (deployment_id)
);

CREATE TABLE IF NOT EXISTS public.development_paths
(
    path_id serial NOT NULL,
    category prosper_category,
    level integer,
    required_skills jsonb,
    required_scores jsonb,
    certifications jsonb,
    next_level_requirements text COLLATE pg_catalog."default",
    CONSTRAINT development_paths_pkey PRIMARY KEY (path_id)
);

CREATE TABLE IF NOT EXISTS public.employee_achievements
(
    id serial NOT NULL,
    employee_id integer,
    achievement_id integer,
    earned_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    points_earned integer,
    visibility_level character varying(20) COLLATE pg_catalog."default",
    CONSTRAINT employee_achievements_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.employee_goals
(
    goal_id serial NOT NULL,
    employee_id integer,
    period_id integer,
    category character varying(50) COLLATE pg_catalog."default",
    goal_description text COLLATE pg_catalog."default",
    target_date date,
    priority character varying(20) COLLATE pg_catalog."default",
    status character varying(50) COLLATE pg_catalog."default",
    progress_percentage numeric(5, 2),
    metrics jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT employee_goals_pkey PRIMARY KEY (goal_id)
);

CREATE TABLE IF NOT EXISTS public.employee_manager_hierarchy
(
    employee_id serial NOT NULL,
    employee_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    manager_id integer,
    department_id integer,
    team_id integer,
    role character varying(100) COLLATE pg_catalog."default",
    last_updated timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    active boolean DEFAULT true,
    CONSTRAINT employee_manager_hierarchy_pkey PRIMARY KEY (employee_id)
);

CREATE TABLE IF NOT EXISTS public.employee_recognition
(
    recognition_id serial NOT NULL,
    employee_id integer,
    recognizer_id integer,
    recognition_type character varying(50) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    award_date date,
    impact_level character varying(20) COLLATE pg_catalog."default",
    visibility character varying(50) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT employee_recognition_pkey PRIMARY KEY (recognition_id)
);

CREATE TABLE IF NOT EXISTS public.employee_risk_assessment
(
    assessment_id serial NOT NULL,
    employee_id integer,
    assessment_date date,
    risk_level character varying(20) COLLATE pg_catalog."default",
    risk_factors jsonb,
    mitigation_plan text COLLATE pg_catalog."default",
    follow_up_date date,
    CONSTRAINT employee_risk_assessment_pkey PRIMARY KEY (assessment_id)
);

CREATE TABLE IF NOT EXISTS public.enablement_activities_catalog
(
    activity_id serial NOT NULL,
    activity_name character varying(200) COLLATE pg_catalog."default",
    category character varying(100) COLLATE pg_catalog."default",
    points_value integer,
    required_for_level character varying(50)[] COLLATE pg_catalog."default",
    validity_period integer,
    is_active boolean DEFAULT true,
    CONSTRAINT enablement_activities_catalog_pkey PRIMARY KEY (activity_id)
);

CREATE TABLE IF NOT EXISTS public.enablement_points_tracking
(
    tracking_id serial NOT NULL,
    employee_id integer,
    activity_type character varying(100) COLLATE pg_catalog."default",
    points_earned integer,
    completion_date date,
    verification_status character varying(50) COLLATE pg_catalog."default",
    expiry_date date,
    CONSTRAINT enablement_points_tracking_pkey PRIMARY KEY (tracking_id)
);

CREATE TABLE IF NOT EXISTS public.enablement_progress_metrics
(
    metric_id serial NOT NULL,
    period_start date,
    period_end date,
    total_participants integer,
    completed_activities integer,
    participation_rate numeric(5, 2),
    activity_breakdown jsonb,
    CONSTRAINT enablement_progress_metrics_pkey PRIMARY KEY (metric_id)
);

CREATE TABLE IF NOT EXISTS public.engagement_predictions
(
    prediction_id serial NOT NULL,
    metric_type character varying(50) COLLATE pg_catalog."default",
    target_date date,
    predicted_value numeric(5, 2),
    confidence_level numeric(5, 2),
    factors_considered jsonb,
    model_version character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT engagement_predictions_pkey PRIMARY KEY (prediction_id)
);

CREATE TABLE IF NOT EXISTS public.engagement_risk_factors
(
    factor_id serial NOT NULL,
    factor_name character varying(100) COLLATE pg_catalog."default",
    weight numeric(3, 2),
    threshold_values jsonb,
    data_source character varying(50) COLLATE pg_catalog."default",
    calculation_method text COLLATE pg_catalog."default",
    CONSTRAINT engagement_risk_factors_pkey PRIMARY KEY (factor_id)
);

CREATE TABLE IF NOT EXISTS public.evaluation_periods
(
    period_id serial NOT NULL,
    period_name character varying(100) COLLATE pg_catalog."default",
    start_date date,
    end_date date,
    status character varying(50) COLLATE pg_catalog."default",
    category character varying(50) COLLATE pg_catalog."default",
    reminder_dates jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT evaluation_periods_pkey PRIMARY KEY (period_id)
);

CREATE TABLE IF NOT EXISTS public.evaluation_submissions
(
    submission_id serial NOT NULL,
    period_id integer,
    employee_id integer,
    category character varying(50) COLLATE pg_catalog."default",
    submission_date timestamp without time zone,
    status character varying(50) COLLATE pg_catalog."default",
    last_modified timestamp without time zone,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT evaluation_submissions_pkey PRIMARY KEY (submission_id)
);

CREATE TABLE IF NOT EXISTS public.feedback_actions
(
    action_id serial NOT NULL,
    suggestion_id integer,
    action_type character varying(50) COLLATE pg_catalog."default",
    assigned_to integer,
    due_date date,
    completion_status character varying(20) COLLATE pg_catalog."default",
    impact_measurement jsonb,
    CONSTRAINT feedback_actions_pkey PRIMARY KEY (action_id)
);

CREATE TABLE IF NOT EXISTS public.form_submission_windows
(
    window_id serial NOT NULL,
    form_type character varying(50) COLLATE pg_catalog."default",
    start_date timestamp without time zone,
    end_date timestamp without time zone,
    employee_id integer,
    status character varying(20) COLLATE pg_catalog."default",
    CONSTRAINT form_submission_windows_pkey PRIMARY KEY (window_id)
);

CREATE TABLE IF NOT EXISTS public.goal_achievement_metrics
(
    metric_id serial NOT NULL,
    employee_id integer,
    period_start date,
    period_end date,
    total_goals integer,
    goals_achieved integer,
    achievement_rate numeric(5, 2),
    target_threshold numeric(5, 2) DEFAULT 80.00,
    CONSTRAINT goal_achievement_metrics_pkey PRIMARY KEY (metric_id)
);

CREATE TABLE IF NOT EXISTS public.goal_dependencies
(
    dependency_id serial NOT NULL,
    goal_id integer,
    dependent_goal_id integer,
    dependency_type character varying(50) COLLATE pg_catalog."default",
    impact_level character varying(20) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default",
    CONSTRAINT goal_dependencies_pkey PRIMARY KEY (dependency_id)
);

CREATE TABLE IF NOT EXISTS public.goal_milestones
(
    milestone_id serial NOT NULL,
    goal_id integer,
    milestone_name character varying(100) COLLATE pg_catalog."default",
    target_date date,
    completion_status character varying(20) COLLATE pg_catalog."default",
    blocking_issues jsonb,
    support_needed text COLLATE pg_catalog."default",
    CONSTRAINT goal_milestones_pkey PRIMARY KEY (milestone_id)
);

CREATE TABLE IF NOT EXISTS public.goal_reviews
(
    review_id serial NOT NULL,
    goal_id integer,
    review_date date,
    reviewer_id integer,
    status character varying(50) COLLATE pg_catalog."default",
    comments text COLLATE pg_catalog."default",
    next_steps jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT goal_reviews_pkey PRIMARY KEY (review_id)
);

CREATE TABLE IF NOT EXISTS public.health_checks
(
    check_id bigserial NOT NULL,
    check_name text COLLATE pg_catalog."default" NOT NULL,
    check_type text COLLATE pg_catalog."default" NOT NULL,
    check_query text COLLATE pg_catalog."default" NOT NULL,
    threshold_config jsonb,
    is_active boolean DEFAULT true,
    last_check timestamp without time zone,
    last_status text COLLATE pg_catalog."default",
    notification_config jsonb,
    CONSTRAINT health_checks_pkey PRIMARY KEY (check_id)
);

CREATE TABLE IF NOT EXISTS public.implementation_milestones
(
    milestone_id serial NOT NULL,
    milestone_name character varying(200) COLLATE pg_catalog."default",
    target_date date,
    actual_date date,
    status character varying(50) COLLATE pg_catalog."default",
    dependencies integer[],
    notes text COLLATE pg_catalog."default",
    CONSTRAINT implementation_milestones_pkey PRIMARY KEY (milestone_id)
);

CREATE TABLE IF NOT EXISTS public.improvement_initiatives
(
    initiative_id serial NOT NULL,
    employee_id integer,
    category character varying(50) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    start_date date,
    target_completion_date date,
    status character varying(50) COLLATE pg_catalog."default",
    progress_metrics jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT improvement_initiatives_pkey PRIMARY KEY (initiative_id)
);

CREATE TABLE IF NOT EXISTS public.improvement_suggestions
(
    suggestion_id serial NOT NULL,
    employee_id integer,
    category character varying(50) COLLATE pg_catalog."default",
    suggestion_text text COLLATE pg_catalog."default",
    impact_area character varying(50) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default",
    votes integer DEFAULT 0,
    implementation_status character varying(20) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT improvement_suggestions_pkey PRIMARY KEY (suggestion_id)
);

CREATE TABLE IF NOT EXISTS public.job_executions
(
    execution_id bigserial NOT NULL,
    job_id bigint,
    scheduled_time timestamp without time zone NOT NULL,
    started_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    completed_at timestamp without time zone,
    status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'RUNNING'::text,
    result_data jsonb,
    error_details jsonb,
    CONSTRAINT job_executions_pkey PRIMARY KEY (execution_id)
);

CREATE TABLE IF NOT EXISTS public.knowledge_transfer
(
    transfer_id serial NOT NULL,
    source_employee_id integer,
    target_employee_id integer,
    category character varying(50) COLLATE pg_catalog."default",
    knowledge_area character varying(100) COLLATE pg_catalog."default",
    start_date date,
    completion_date date,
    transfer_status character varying(50) COLLATE pg_catalog."default",
    effectiveness_metrics jsonb,
    verification_methods jsonb[],
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT knowledge_transfer_pkey PRIMARY KEY (transfer_id)
);

CREATE TABLE IF NOT EXISTS public.kpi_calculation_rules
(
    rule_id serial NOT NULL,
    kpi_category prosper_category,
    calculation_type character varying(50) COLLATE pg_catalog."default",
    weight_factor numeric(3, 2),
    formula text COLLATE pg_catalog."default",
    validation_rules jsonb,
    effective_date date,
    is_active boolean DEFAULT true,
    CONSTRAINT kpi_calculation_rules_pkey PRIMARY KEY (rule_id)
);

CREATE TABLE IF NOT EXISTS public.kpi_relationship_metrics
(
    metric_id serial NOT NULL,
    employee_id integer,
    relationship_type character varying(50) COLLATE pg_catalog."default",
    strength_score numeric(5, 2),
    last_interaction date,
    CONSTRAINT kpi_relationship_metrics_pkey PRIMARY KEY (metric_id)
);

CREATE TABLE IF NOT EXISTS public.kpi_weight_config
(
    config_id serial NOT NULL,
    role_type character varying(50) COLLATE pg_catalog."default",
    kpi_type character varying(50) COLLATE pg_catalog."default",
    weight numeric(3, 2),
    effective_date date,
    end_date date,
    CONSTRAINT kpi_weight_config_pkey PRIMARY KEY (config_id)
);

CREATE TABLE IF NOT EXISTS public.learning_paths
(
    path_id serial NOT NULL,
    employee_id integer,
    category character varying(50) COLLATE pg_catalog."default",
    current_level character varying(50) COLLATE pg_catalog."default",
    target_level character varying(50) COLLATE pg_catalog."default",
    required_skills jsonb[],
    completed_modules jsonb[],
    start_date date,
    target_completion_date date,
    progress_percentage numeric(5, 2),
    status character varying(20) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT learning_paths_pkey PRIMARY KEY (path_id)
);

CREATE TABLE IF NOT EXISTS public.login_attempts
(
    attempt_id serial NOT NULL,
    username character varying(50) COLLATE pg_catalog."default",
    ip_address inet,
    success boolean,
    attempt_time timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT login_attempts_pkey PRIMARY KEY (attempt_id)
);

CREATE TABLE IF NOT EXISTS public.maintenance_history
(
    history_id bigserial NOT NULL,
    schedule_id bigint,
    start_time timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    end_time timestamp without time zone,
    status text COLLATE pg_catalog."default" NOT NULL,
    affected_objects jsonb,
    performance_impact jsonb,
    error_details text COLLATE pg_catalog."default",
    CONSTRAINT maintenance_history_pkey PRIMARY KEY (history_id)
);

CREATE TABLE IF NOT EXISTS public.maintenance_schedule
(
    schedule_id bigserial NOT NULL,
    task_name text COLLATE pg_catalog."default" NOT NULL,
    task_type text COLLATE pg_catalog."default" NOT NULL,
    frequency interval NOT NULL,
    last_run timestamp without time zone,
    next_run timestamp without time zone,
    is_active boolean DEFAULT true,
    configuration jsonb,
    CONSTRAINT maintenance_schedule_pkey PRIMARY KEY (schedule_id)
);

CREATE TABLE IF NOT EXISTS public.maintenance_tasks
(
    task_id bigserial NOT NULL,
    task_name text COLLATE pg_catalog."default" NOT NULL,
    task_type text COLLATE pg_catalog."default" NOT NULL,
    schedule_type text COLLATE pg_catalog."default" NOT NULL,
    schedule_config jsonb NOT NULL,
    last_run timestamp without time zone,
    next_run timestamp without time zone,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT maintenance_tasks_pkey PRIMARY KEY (task_id)
);

CREATE TABLE IF NOT EXISTS public.manager
(
    manager_id integer NOT NULL,
    manager_name character varying(100) COLLATE pg_catalog."default",
    department_id integer,
    level character varying(50) COLLATE pg_catalog."default",
    start_date date DEFAULT CURRENT_DATE,
    direct_reports integer DEFAULT 0,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'Active'::character varying,
    CONSTRAINT manager_pkey PRIMARY KEY (manager_id)
);

CREATE TABLE IF NOT EXISTS public.manager_engagement_metrics
(
    metric_id serial NOT NULL,
    manager_id integer,
    period_start date,
    period_end date,
    reviews_due integer,
    reviews_completed integer,
    feedback_provided integer,
    engagement_score numeric(5, 2),
    CONSTRAINT manager_engagement_metrics_pkey PRIMARY KEY (metric_id)
);

CREATE TABLE IF NOT EXISTS public.mentorship_interactions
(
    interaction_id serial NOT NULL,
    match_id integer,
    interaction_date timestamp without time zone,
    interaction_type character varying(50) COLLATE pg_catalog."default",
    topics_covered text[] COLLATE pg_catalog."default",
    action_items jsonb,
    effectiveness_rating integer,
    CONSTRAINT mentorship_interactions_pkey PRIMARY KEY (interaction_id)
);

CREATE TABLE IF NOT EXISTS public.mentorship_matching
(
    match_id serial NOT NULL,
    mentor_id integer,
    mentee_id integer,
    program_focus jsonb,
    start_date date,
    end_date date,
    success_metrics jsonb,
    status character varying(20) COLLATE pg_catalog."default",
    CONSTRAINT mentorship_matching_pkey PRIMARY KEY (match_id)
);

CREATE TABLE IF NOT EXISTS public.mentorship_programs
(
    program_id serial NOT NULL,
    mentor_id integer,
    mentee_id integer,
    start_date date,
    end_date date,
    focus_areas jsonb[],
    status character varying(50) COLLATE pg_catalog."default",
    progress_notes jsonb[],
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT mentorship_programs_pkey PRIMARY KEY (program_id)
);

CREATE TABLE IF NOT EXISTS public.metric_aggregations
(
    aggregation_id bigserial NOT NULL,
    metric_name text COLLATE pg_catalog."default" NOT NULL,
    granularity text COLLATE pg_catalog."default" NOT NULL,
    time_bucket timestamp without time zone NOT NULL,
    min_value numeric,
    max_value numeric,
    avg_value numeric,
    sum_value numeric,
    count_value bigint,
    percentiles jsonb,
    dimensions jsonb,
    CONSTRAINT metric_aggregations_pkey PRIMARY KEY (aggregation_id)
);

CREATE TABLE IF NOT EXISTS public.metric_alerts
(
    alert_id serial NOT NULL,
    metric_type character varying(50) COLLATE pg_catalog."default",
    threshold_type character varying(20) COLLATE pg_catalog."default",
    threshold_value numeric(5, 2),
    current_value numeric(5, 2),
    alert_status character varying(20) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT metric_alerts_pkey PRIMARY KEY (alert_id)
);

CREATE TABLE IF NOT EXISTS public.metric_correlations
(
    correlation_id serial NOT NULL,
    primary_metric character varying(50) COLLATE pg_catalog."default",
    correlated_metric character varying(50) COLLATE pg_catalog."default",
    correlation_coefficient numeric(5, 4),
    significance_level numeric(5, 4),
    analysis_period_start date,
    analysis_period_end date,
    insights text COLLATE pg_catalog."default",
    CONSTRAINT metric_correlations_pkey PRIMARY KEY (correlation_id)
);

CREATE TABLE IF NOT EXISTS public.notification_channels
(
    channel_id bigserial NOT NULL,
    channel_name text COLLATE pg_catalog."default" NOT NULL,
    channel_type text COLLATE pg_catalog."default" NOT NULL,
    configuration jsonb NOT NULL,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT notification_channels_pkey PRIMARY KEY (channel_id)
);

CREATE TABLE IF NOT EXISTS public.notification_history
(
    notification_id bigserial NOT NULL,
    channel_id bigint,
    template_id bigint,
    notification_type text COLLATE pg_catalog."default" NOT NULL,
    status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'PENDING'::text,
    recipient text COLLATE pg_catalog."default",
    subject text COLLATE pg_catalog."default",
    body text COLLATE pg_catalog."default",
    sent_at timestamp without time zone,
    error_details jsonb,
    metadata jsonb,
    CONSTRAINT notification_history_pkey PRIMARY KEY (notification_id)
);

CREATE TABLE IF NOT EXISTS public.notification_log
(
    log_id serial NOT NULL,
    template_id bigint,
    recipient_id integer,
    notification_type character varying(50) COLLATE pg_catalog."default",
    status character varying(50) COLLATE pg_catalog."default",
    sent_at timestamp without time zone,
    delivery_status character varying(50) COLLATE pg_catalog."default",
    read_at timestamp without time zone,
    error_message text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT notification_log_pkey PRIMARY KEY (log_id)
);

CREATE TABLE IF NOT EXISTS public.notification_templates
(
    template_id serial NOT NULL,
    template_name character varying(100) COLLATE pg_catalog."default",
    category character varying(50) COLLATE pg_catalog."default",
    subject_template text COLLATE pg_catalog."default",
    body_template text COLLATE pg_catalog."default",
    variables jsonb,
    active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    template_type character varying(50) COLLATE pg_catalog."default",
    html_content text COLLATE pg_catalog."default",
    required_placeholders text[] COLLATE pg_catalog."default",
    cc_roles text[] COLLATE pg_catalog."default",
    bcc_roles text[] COLLATE pg_catalog."default",
    version integer DEFAULT 1,
    last_modified_by integer,
    last_modified_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT notification_templates_pkey PRIMARY KEY (template_id)
);

CREATE TABLE IF NOT EXISTS public.operational_efficiency_metrics
(
    metric_id serial NOT NULL,
    employee_id integer,
    time_entry_compliance boolean,
    forecast_accuracy numeric(5, 2),
    bsc_completion boolean,
    measurement_date date,
    notes text COLLATE pg_catalog."default",
    CONSTRAINT operational_efficiency_metrics_pkey PRIMARY KEY (metric_id)
);

CREATE TABLE IF NOT EXISTS public.opt_in_metrics
(
    metric_id serial NOT NULL,
    year integer,
    quarter integer,
    total_invited integer,
    total_opted_in integer,
    opt_in_rate numeric(5, 2),
    target_rate numeric(5, 2),
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT opt_in_metrics_pkey PRIMARY KEY (metric_id)
);

CREATE TABLE IF NOT EXISTS public.opt_in_tracking
(
    tracking_id serial NOT NULL,
    employee_id integer,
    opt_in_date date,
    manager_approval_date date,
    status character varying(50) COLLATE pg_catalog."default",
    comments text COLLATE pg_catalog."default",
    CONSTRAINT opt_in_tracking_pkey PRIMARY KEY (tracking_id)
);

CREATE TABLE IF NOT EXISTS public.optimization_recommendations
(
    recommendation_id bigserial NOT NULL,
    category text COLLATE pg_catalog."default" NOT NULL,
    priority text COLLATE pg_catalog."default" NOT NULL,
    title text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    current_value text COLLATE pg_catalog."default",
    recommended_value text COLLATE pg_catalog."default",
    estimated_impact jsonb,
    implementation_sql text COLLATE pg_catalog."default",
    status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'PENDING'::text,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    implemented_at timestamp without time zone,
    validation_results jsonb,
    metadata jsonb,
    CONSTRAINT optimization_recommendations_pkey PRIMARY KEY (recommendation_id)
);

CREATE TABLE IF NOT EXISTS public.participation_metrics
(
    metric_id serial NOT NULL,
    cycle_date date,
    total_eligible integer,
    total_submitted integer,
    participation_rate numeric(5, 2),
    cycle_type character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT participation_metrics_pkey PRIMARY KEY (metric_id)
);

CREATE TABLE IF NOT EXISTS public.performance_alerts
(
    alert_id bigserial NOT NULL,
    metric_name text COLLATE pg_catalog."default" NOT NULL,
    alert_type text COLLATE pg_catalog."default" NOT NULL,
    threshold_value numeric NOT NULL,
    current_value numeric NOT NULL,
    alert_time timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    resolution_time timestamp without time zone,
    status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'ACTIVE'::text,
    notification_sent boolean DEFAULT false,
    metadata jsonb,
    CONSTRAINT performance_alerts_pkey PRIMARY KEY (alert_id)
);

CREATE TABLE IF NOT EXISTS public.performance_baselines
(
    baseline_id bigserial NOT NULL,
    metric_name text COLLATE pg_catalog."default" NOT NULL,
    baseline_value numeric NOT NULL,
    calculation_window interval NOT NULL,
    last_updated timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    confidence_score numeric,
    baseline_data jsonb,
    CONSTRAINT performance_baselines_pkey PRIMARY KEY (baseline_id)
);

CREATE TABLE IF NOT EXISTS public.performance_delta_tracking
(
    delta_id serial NOT NULL,
    employee_id integer,
    kpi_category prosper_category,
    previous_score numeric(5, 2),
    new_score numeric(5, 2),
    change_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    justification text COLLATE pg_catalog."default",
    approved_by integer,
    CONSTRAINT performance_delta_tracking_pkey PRIMARY KEY (delta_id)
);

CREATE TABLE IF NOT EXISTS public.performance_feedback
(
    feedback_id serial NOT NULL,
    employee_id integer,
    provider_id integer,
    category character varying(50) COLLATE pg_catalog."default",
    feedback_type character varying(50) COLLATE pg_catalog."default",
    feedback_date date,
    content text COLLATE pg_catalog."default",
    visibility character varying(50) COLLATE pg_catalog."default",
    impact_rating numeric(5, 2),
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT performance_feedback_pkey PRIMARY KEY (feedback_id)
);

CREATE TABLE IF NOT EXISTS public.performance_impact
(
    impact_id serial NOT NULL,
    employee_id integer,
    category character varying(50) COLLATE pg_catalog."default",
    initiative_name character varying(100) COLLATE pg_catalog."default",
    impact_date date,
    metrics_before jsonb,
    metrics_after jsonb,
    roi_calculation numeric(10, 2),
    impact_evidence text[] COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT performance_impact_pkey PRIMARY KEY (impact_id)
);

CREATE TABLE IF NOT EXISTS public.performance_improvement_metrics
(
    metric_id serial NOT NULL,
    employee_id integer,
    measurement_period character varying(50) COLLATE pg_catalog."default",
    baseline_score numeric(5, 2),
    current_score numeric(5, 2),
    improvement_percentage numeric(5, 2),
    target_achieved boolean,
    CONSTRAINT performance_improvement_metrics_pkey PRIMARY KEY (metric_id)
);

CREATE TABLE IF NOT EXISTS public.performance_improvements
(
    improvement_id serial NOT NULL,
    employee_id integer,
    area_of_improvement character varying(100) COLLATE pg_catalog."default",
    initial_score numeric(5, 2),
    target_score numeric(5, 2),
    current_score numeric(5, 2),
    action_plan jsonb,
    review_frequency character varying(50) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT performance_improvements_pkey PRIMARY KEY (improvement_id)
);

CREATE TABLE IF NOT EXISTS public.performance_metrics
(
    metric_id serial NOT NULL,
    employee_id integer,
    category character varying(50) COLLATE pg_catalog."default",
    metric_name character varying(100) COLLATE pg_catalog."default",
    metric_value numeric(10, 2),
    measurement_date date,
    comparison_period character varying(50) COLLATE pg_catalog."default",
    trend_direction character varying(20) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    calculation_formula text COLLATE pg_catalog."default",
    weight numeric(3, 2),
    CONSTRAINT performance_metrics_pkey PRIMARY KEY (metric_id)
);

CREATE TABLE IF NOT EXISTS public.performance_patterns
(
    pattern_id serial NOT NULL,
    pattern_name character varying(100) COLLATE pg_catalog."default",
    detection_rules jsonb,
    impact_level character varying(20) COLLATE pg_catalog."default",
    occurrence_frequency integer,
    action_recommendations text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT performance_patterns_pkey PRIMARY KEY (pattern_id)
);

CREATE TABLE IF NOT EXISTS public.performance_scores
(
    score_id serial NOT NULL,
    employee_id integer,
    category character varying(50) COLLATE pg_catalog."default",
    initial_self_score numeric(5, 2),
    concurrent_score numeric(5, 2),
    delta_score numeric(5, 2),
    self_score numeric(5, 2),
    manager_score numeric(5, 2),
    manager_comment text COLLATE pg_catalog."default",
    challenge_score numeric(5, 2),
    average_score numeric(5, 2),
    evaluation_date date DEFAULT CURRENT_DATE,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    service_id integer,
    comments text COLLATE pg_catalog."default",
    last_modified_by integer,
    last_modified_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT performance_scores_pkey PRIMARY KEY (score_id)
);

CREATE TABLE IF NOT EXISTS public.portfolio_base
(
    score_id serial NOT NULL,
    employee_id integer,
    evaluation_date date DEFAULT CURRENT_DATE,
    initial_self_score numeric(5, 2),
    concurrent_score numeric(5, 2),
    delta_score numeric(5, 2),
    self_score numeric(5, 2),
    manager_score numeric(5, 2),
    manager_comment text COLLATE pg_catalog."default",
    challenge_score numeric(5, 2),
    average_score numeric(5, 2) GENERATED ALWAYS AS (NULLIF((((COALESCE(self_score, (0)::numeric) + COALESCE(manager_score, (0)::numeric)) + COALESCE(challenge_score, (0)::numeric)) / (NULLIF(((
CASE
    WHEN (self_score IS NOT NULL) THEN 1
    ELSE 0
END +
CASE
    WHEN (manager_score IS NOT NULL) THEN 1
    ELSE 0
END) +
CASE
    WHEN (challenge_score IS NOT NULL) THEN 1
    ELSE NULL::integer
END), 0))::numeric), (0)::numeric)) STORED,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    last_modified_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT portfolio_base_pkey PRIMARY KEY (score_id)
);

CREATE TABLE IF NOT EXISTS public.portfolio_brownfield
(
    score_id serial NOT NULL,
    employee_id integer,
    initial_self_score numeric(5, 2),
    concurrent_score numeric(5, 2),
    delta_score numeric(5, 2),
    self_score numeric(5, 2),
    manager_score numeric(5, 2),
    manager_comment text COLLATE pg_catalog."default",
    challenge_score numeric(5, 2),
    average_score numeric(5, 2),
    evaluation_date date DEFAULT CURRENT_DATE,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    last_modified_by integer,
    last_modified_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    version integer DEFAULT 1,
    status character varying(50) COLLATE pg_catalog."default" DEFAULT 'active'::character varying,
    CONSTRAINT portfolio_brownfield_pkey PRIMARY KEY (score_id)
);

CREATE TABLE IF NOT EXISTS public.portfolio_cloud_services
(
    score_id serial NOT NULL,
    employee_id integer,
    initial_self_score numeric(5, 2),
    concurrent_score numeric(5, 2),
    delta_score numeric(5, 2),
    self_score numeric(5, 2),
    manager_score numeric(5, 2),
    manager_comment text COLLATE pg_catalog."default",
    challenge_score numeric(5, 2),
    average_score numeric(5, 2),
    evaluation_date date DEFAULT CURRENT_DATE,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    last_modified_by integer,
    last_modified_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    version integer DEFAULT 1,
    status character varying(50) COLLATE pg_catalog."default" DEFAULT 'active'::character varying,
    category prosper_category,
    CONSTRAINT portfolio_cloud_services_pkey PRIMARY KEY (score_id)
);

CREATE TABLE IF NOT EXISTS public.portfolio_design_success
(
    score_id serial NOT NULL,
    employee_id integer,
    initial_self_score numeric(5, 2),
    concurrent_score numeric(5, 2),
    delta_score numeric(5, 2),
    self_score numeric(5, 2),
    manager_score numeric(5, 2),
    manager_comment text COLLATE pg_catalog."default",
    challenge_score numeric(5, 2),
    average_score numeric(5, 2),
    evaluation_date date DEFAULT CURRENT_DATE,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    last_modified_by integer,
    last_modified_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    version integer DEFAULT 1,
    status character varying(50) COLLATE pg_catalog."default" DEFAULT 'active'::character varying,
    category prosper_category,
    CONSTRAINT portfolio_design_success_pkey PRIMARY KEY (score_id)
);

CREATE TABLE IF NOT EXISTS public.portfolio_preferred_success
(
    score_id serial NOT NULL,
    employee_id integer,
    initial_self_score numeric(5, 2),
    concurrent_score numeric(5, 2),
    delta_score numeric(5, 2),
    self_score numeric(5, 2),
    manager_score numeric(5, 2),
    manager_comment text COLLATE pg_catalog."default",
    challenge_score numeric(5, 2),
    average_score numeric(5, 2),
    evaluation_date date DEFAULT CURRENT_DATE,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    last_modified_by integer,
    last_modified_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    version integer DEFAULT 1,
    status character varying(50) COLLATE pg_catalog."default" DEFAULT 'active'::character varying,
    CONSTRAINT portfolio_preferred_success_pkey PRIMARY KEY (score_id)
);

CREATE TABLE IF NOT EXISTS public.portfolio_premium_engagement
(
    score_id serial NOT NULL,
    employee_id integer,
    initial_self_score numeric(5, 2),
    concurrent_score numeric(5, 2),
    delta_score numeric(5, 2),
    self_score numeric(5, 2),
    manager_score numeric(5, 2),
    manager_comment text COLLATE pg_catalog."default",
    challenge_score numeric(5, 2),
    average_score numeric(5, 2),
    evaluation_date date DEFAULT CURRENT_DATE,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    last_modified_by integer,
    last_modified_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    version integer DEFAULT 1,
    status character varying(50) COLLATE pg_catalog."default" DEFAULT 'active'::character varying,
    category prosper_category,
    CONSTRAINT portfolio_premium_engagement_pkey PRIMARY KEY (score_id)
);

CREATE TABLE IF NOT EXISTS public.portfolio_services
(
    service_id serial NOT NULL,
    service_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT portfolio_services_pkey PRIMARY KEY (service_id),
    CONSTRAINT portfolio_services_service_name_key UNIQUE (service_name)
);

CREATE TABLE IF NOT EXISTS public.portfolio_training
(
    score_id serial NOT NULL,
    employee_id integer,
    evaluation_date date DEFAULT CURRENT_DATE,
    initial_self_score numeric(5, 2),
    concurrent_score numeric(5, 2),
    delta_score numeric(5, 2),
    self_score numeric(5, 2),
    manager_score numeric(5, 2),
    manager_comment text COLLATE pg_catalog."default",
    challenge_score numeric(5, 2),
    average_score numeric(5, 2) GENERATED ALWAYS AS (NULLIF((((COALESCE(self_score, (0)::numeric) + COALESCE(manager_score, (0)::numeric)) + COALESCE(challenge_score, (0)::numeric)) / (NULLIF(((
CASE
    WHEN (self_score IS NOT NULL) THEN 1
    ELSE 0
END +
CASE
    WHEN (manager_score IS NOT NULL) THEN 1
    ELSE 0
END) +
CASE
    WHEN (challenge_score IS NOT NULL) THEN 1
    ELSE NULL::integer
END), 0))::numeric), (0)::numeric)) STORED,
    training_type character varying(50) COLLATE pg_catalog."default",
    completion_status character varying(20) COLLATE pg_catalog."default",
    effectiveness_score numeric(5, 2),
    CONSTRAINT portfolio_training_pkey PRIMARY KEY (score_id)
);

CREATE TABLE IF NOT EXISTS public.program_retention_metrics
(
    metric_id serial NOT NULL,
    year integer,
    total_previous_year integer,
    total_retained integer,
    retention_rate numeric(5, 2),
    target_rate numeric(5, 2),
    analysis_date date,
    CONSTRAINT program_retention_metrics_pkey PRIMARY KEY (metric_id)
);

CREATE TABLE IF NOT EXISTS public.project_assignments
(
    assignment_id serial NOT NULL,
    employee_id integer,
    project_name character varying(100) COLLATE pg_catalog."default",
    role character varying(50) COLLATE pg_catalog."default",
    start_date date,
    end_date date,
    allocation_percentage numeric(5, 2),
    impact_metrics jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    project_code character varying(50) COLLATE pg_catalog."default",
    billable boolean DEFAULT true,
    skills_utilized text[] COLLATE pg_catalog."default",
    assignment_type character varying(50) COLLATE pg_catalog."default",
    priority integer,
    weekly_hours numeric(5, 2),
    assignment_status character varying(50) COLLATE pg_catalog."default" DEFAULT 'active'::character varying,
    last_modified_by integer,
    last_modified_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT project_assignments_pkey PRIMARY KEY (assignment_id)
);

CREATE TABLE IF NOT EXISTS public.prosper_score_metrics
(
    metric_id serial NOT NULL,
    measurement_period character varying(50) COLLATE pg_catalog."default",
    total_employees integer,
    improved_employees integer,
    improvement_threshold numeric(5, 2) DEFAULT 10.00,
    achievement_rate numeric(5, 2),
    period_start date,
    period_end date,
    CONSTRAINT prosper_score_metrics_pkey PRIMARY KEY (metric_id)
);

CREATE TABLE IF NOT EXISTS public.query_patterns
(
    pattern_id bigserial NOT NULL,
    pattern_hash text COLLATE pg_catalog."default" NOT NULL,
    query_pattern text COLLATE pg_catalog."default" NOT NULL,
    first_seen timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    last_seen timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    execution_count bigint DEFAULT 1,
    total_time numeric DEFAULT 0,
    mean_time numeric DEFAULT 0,
    min_time numeric,
    max_time numeric,
    stddev_time numeric,
    rows_processed bigint DEFAULT 0,
    shared_blks_hit bigint DEFAULT 0,
    shared_blks_read bigint DEFAULT 0,
    temp_blks_written bigint DEFAULT 0,
    optimization_status text COLLATE pg_catalog."default" DEFAULT 'NONE'::text,
    metadata jsonb,
    CONSTRAINT query_patterns_pkey PRIMARY KEY (pattern_id)
);

CREATE TABLE IF NOT EXISTS public.rate_limit_tracking
(
    tracking_id bigserial NOT NULL,
    identifier text COLLATE pg_catalog."default" NOT NULL,
    action_type text COLLATE pg_catalog."default" NOT NULL,
    "timestamp" timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    request_details jsonb,
    CONSTRAINT rate_limit_tracking_pkey PRIMARY KEY (tracking_id),
    CONSTRAINT rate_limit_identifier_idx UNIQUE (identifier, action_type, "timestamp")
);

COMMENT ON TABLE public.rate_limit_tracking
    IS 'Tracks rate limiting for various actions';

CREATE TABLE IF NOT EXISTS public.relationship_assessment
(
    assessment_id serial NOT NULL,
    employee_id integer,
    stakeholder_type character varying(50) COLLATE pg_catalog."default",
    relationship_strength numeric(5, 2),
    interaction_frequency character varying(50) COLLATE pg_catalog."default",
    last_interaction_date date,
    next_action_date date,
    notes text COLLATE pg_catalog."default",
    CONSTRAINT relationship_assessment_pkey PRIMARY KEY (assessment_id)
);

CREATE TABLE IF NOT EXISTS public.relationship_improvement_metrics
(
    metric_id serial NOT NULL,
    employee_id integer,
    measurement_period character varying(50) COLLATE pg_catalog."default",
    baseline_score numeric(5, 2),
    current_score numeric(5, 2),
    improvement_percentage numeric(5, 2),
    stakeholder_category character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT relationship_improvement_metrics_pkey PRIMARY KEY (metric_id)
);

CREATE TABLE IF NOT EXISTS public.report_definitions
(
    report_id bigserial NOT NULL,
    report_name text COLLATE pg_catalog."default" NOT NULL,
    report_type text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    query_definition jsonb NOT NULL,
    visualization_config jsonb,
    schedule_config jsonb,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT report_definitions_pkey PRIMARY KEY (report_id)
);

CREATE TABLE IF NOT EXISTS public.report_executions
(
    execution_id bigserial NOT NULL,
    report_id bigint,
    execution_start timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    execution_end timestamp without time zone,
    status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'RUNNING'::text,
    result_data jsonb,
    visualization_data jsonb,
    execution_metadata jsonb,
    CONSTRAINT report_executions_pkey PRIMARY KEY (execution_id)
);

CREATE TABLE IF NOT EXISTS public.report_history
(
    report_id bigserial NOT NULL,
    template_id bigint,
    generation_start timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    generation_end timestamp without time zone,
    status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'IN_PROGRESS'::text,
    report_data jsonb,
    report_metadata jsonb,
    CONSTRAINT report_history_pkey PRIMARY KEY (report_id)
);

CREATE TABLE IF NOT EXISTS public.report_templates
(
    template_id bigserial NOT NULL,
    template_name text COLLATE pg_catalog."default" NOT NULL,
    template_type text COLLATE pg_catalog."default" NOT NULL,
    template_config jsonb NOT NULL,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT report_templates_pkey PRIMARY KEY (template_id)
);

CREATE TABLE IF NOT EXISTS public.resource_allocation
(
    allocation_id serial NOT NULL,
    employee_id integer,
    project_id integer,
    allocation_percentage numeric(5, 2),
    start_date date,
    end_date date,
    role_type character varying(50) COLLATE pg_catalog."default",
    skills_utilized jsonb[],
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    allocation_type character varying(50) COLLATE pg_catalog."default",
    billing_type character varying(50) COLLATE pg_catalog."default",
    cost_center character varying(100) COLLATE pg_catalog."default",
    allocation_status character varying(50) COLLATE pg_catalog."default" DEFAULT 'active'::character varying,
    weekly_capacity integer DEFAULT 40,
    actual_hours numeric(5, 2),
    variance_explanation text COLLATE pg_catalog."default",
    last_modified_by integer,
    last_modified_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT resource_allocation_pkey PRIMARY KEY (allocation_id)
);

CREATE TABLE IF NOT EXISTS public.resource_allocation_history
(
    history_id serial NOT NULL,
    allocation_id integer,
    employee_id integer,
    change_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    old_allocation_percentage numeric(5, 2),
    new_allocation_percentage numeric(5, 2),
    old_status character varying(50) COLLATE pg_catalog."default",
    new_status character varying(50) COLLATE pg_catalog."default",
    changed_by integer,
    change_reason text COLLATE pg_catalog."default",
    CONSTRAINT resource_allocation_history_pkey PRIMARY KEY (history_id)
);

CREATE TABLE IF NOT EXISTS public.review_cycles
(
    cycle_id serial NOT NULL,
    cycle_name character varying(100) COLLATE pg_catalog."default",
    start_date date,
    end_date date,
    status character varying(50) COLLATE pg_catalog."default",
    participants jsonb,
    completion_status jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT review_cycles_pkey PRIMARY KEY (cycle_id)
);

CREATE TABLE IF NOT EXISTS public.review_templates
(
    template_id serial NOT NULL,
    template_name character varying(100) COLLATE pg_catalog."default",
    category character varying(50) COLLATE pg_catalog."default",
    sections jsonb[],
    scoring_criteria jsonb,
    required_approvers integer[],
    active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT review_templates_pkey PRIMARY KEY (template_id)
);

CREATE TABLE IF NOT EXISTS public.satisfaction_survey_metrics
(
    metric_id serial NOT NULL,
    survey_period character varying(50) COLLATE pg_catalog."default",
    survey_date date,
    total_respondents integer,
    average_score numeric(3, 2),
    target_score numeric(3, 2) DEFAULT 4.00,
    response_distribution jsonb,
    CONSTRAINT satisfaction_survey_metrics_pkey PRIMARY KEY (metric_id)
);

CREATE TABLE IF NOT EXISTS public.scheduled_jobs
(
    job_id bigserial NOT NULL,
    job_name text COLLATE pg_catalog."default" NOT NULL,
    job_type text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    schedule_type text COLLATE pg_catalog."default" NOT NULL,
    cron_expression text COLLATE pg_catalog."default",
    interval_value interval,
    target_type text COLLATE pg_catalog."default" NOT NULL,
    target_id bigint NOT NULL,
    parameters jsonb DEFAULT '{}'::jsonb,
    is_active boolean DEFAULT true,
    last_run timestamp without time zone,
    next_run timestamp without time zone,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT scheduled_jobs_pkey PRIMARY KEY (job_id)
);

CREATE TABLE IF NOT EXISTS public.schema_versions
(
    version_id bigserial NOT NULL,
    version_number text COLLATE pg_catalog."default" NOT NULL,
    is_current boolean DEFAULT false,
    deployed_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    deployment_id bigint,
    schema_snapshot jsonb,
    metadata jsonb,
    CONSTRAINT schema_versions_pkey PRIMARY KEY (version_id)
);

CREATE TABLE IF NOT EXISTS public.score_history
(
    history_id serial NOT NULL,
    employee_id integer,
    category character varying(50) COLLATE pg_catalog."default",
    score_type character varying(50) COLLATE pg_catalog."default",
    old_value numeric(5, 2),
    new_value numeric(5, 2),
    change_date timestamp without time zone,
    changed_by integer,
    reason text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT score_history_pkey PRIMARY KEY (history_id)
);

CREATE TABLE IF NOT EXISTS public.security_events
(
    event_id bigserial NOT NULL,
    event_type text COLLATE pg_catalog."default" NOT NULL,
    event_time timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    ip_address inet,
    user_id integer,
    event_details jsonb,
    severity text COLLATE pg_catalog."default" DEFAULT 'NORMAL'::text,
    CONSTRAINT security_events_pkey PRIMARY KEY (event_id)
);

COMMENT ON TABLE public.security_events
    IS 'Stores security-related events for monitoring and analysis';

CREATE TABLE IF NOT EXISTS public.security_monitoring_log
(
    log_id bigserial NOT NULL,
    execution_time timestamp without time zone NOT NULL,
    lookback_hours integer NOT NULL,
    alert_threshold integer NOT NULL,
    execution_duration interval NOT NULL,
    findings jsonb NOT NULL,
    CONSTRAINT security_monitoring_log_pkey PRIMARY KEY (log_id)
);

COMMENT ON TABLE public.security_monitoring_log
    IS 'Logs the execution of security monitoring functions';

CREATE TABLE IF NOT EXISTS public.security_notifications
(
    notification_id bigserial NOT NULL,
    notification_type text COLLATE pg_catalog."default" NOT NULL,
    severity text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    processed_at timestamp without time zone,
    notification_status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'PENDING'::text,
    recipient_list jsonb,
    message_content jsonb,
    CONSTRAINT security_notifications_pkey PRIMARY KEY (notification_id)
);

CREATE TABLE IF NOT EXISTS public.skill_requirements
(
    requirement_id serial NOT NULL,
    role_name character varying(100) COLLATE pg_catalog."default",
    category character varying(50) COLLATE pg_catalog."default",
    required_skills jsonb,
    minimum_proficiency numeric(5, 2),
    preferred_certifications text[] COLLATE pg_catalog."default",
    experience_level character varying(50) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT skill_requirements_pkey PRIMARY KEY (requirement_id)
);

CREATE TABLE IF NOT EXISTS public.skills_inventory
(
    skill_id serial NOT NULL,
    employee_id integer,
    category character varying(50) COLLATE pg_catalog."default",
    skill_name character varying(100) COLLATE pg_catalog."default",
    proficiency_level numeric(5, 2),
    last_assessed date,
    certification_proof text[] COLLATE pg_catalog."default",
    experience_months integer,
    last_used_date date,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT skills_inventory_pkey PRIMARY KEY (skill_id)
);

CREATE TABLE IF NOT EXISTS public.stakeholder_relationship_history
(
    history_id serial NOT NULL,
    employee_id integer,
    stakeholder_id integer,
    relationship_type character varying(50) COLLATE pg_catalog."default",
    quality_score numeric(3, 2),
    interaction_date date,
    notes text COLLATE pg_catalog."default",
    CONSTRAINT stakeholder_relationship_history_pkey PRIMARY KEY (history_id)
);

CREATE TABLE IF NOT EXISTS public.system_configurations
(
    config_id bigserial NOT NULL,
    config_name text COLLATE pg_catalog."default" NOT NULL,
    config_value text COLLATE pg_catalog."default",
    config_type text COLLATE pg_catalog."default" NOT NULL,
    is_active boolean DEFAULT true,
    description text COLLATE pg_catalog."default",
    validation_rules jsonb,
    last_modified timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modified_by text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT system_configurations_pkey PRIMARY KEY (config_id)
);

CREATE TABLE IF NOT EXISTS public.system_integration_mapping
(
    mapping_id serial NOT NULL,
    source_system character varying(50) COLLATE pg_catalog."default",
    source_field character varying(100) COLLATE pg_catalog."default",
    target_table character varying(100) COLLATE pg_catalog."default",
    target_field character varying(100) COLLATE pg_catalog."default",
    transformation_rule jsonb,
    is_active boolean DEFAULT true,
    CONSTRAINT system_integration_mapping_pkey PRIMARY KEY (mapping_id)
);

CREATE TABLE IF NOT EXISTS public.system_integrations
(
    integration_id serial NOT NULL,
    system_name character varying(100) COLLATE pg_catalog."default",
    integration_type character varying(50) COLLATE pg_catalog."default",
    configuration jsonb,
    status character varying(50) COLLATE pg_catalog."default",
    last_sync timestamp without time zone,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT system_integrations_pkey PRIMARY KEY (integration_id)
);

CREATE TABLE IF NOT EXISTS public.system_metrics_history
(
    metric_id bigserial NOT NULL,
    metric_name text COLLATE pg_catalog."default" NOT NULL,
    metric_value numeric NOT NULL,
    metric_type text COLLATE pg_catalog."default" NOT NULL,
    collection_time timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    granularity text COLLATE pg_catalog."default" NOT NULL,
    dimensions jsonb,
    CONSTRAINT system_metrics_history_pkey PRIMARY KEY (metric_id)
);

CREATE TABLE IF NOT EXISTS public.system_settings
(
    setting_id serial NOT NULL,
    setting_name character varying(100) COLLATE pg_catalog."default",
    setting_value jsonb,
    category character varying(50) COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    last_modified timestamp without time zone,
    modified_by integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT system_settings_pkey PRIMARY KEY (setting_id)
);

CREATE TABLE IF NOT EXISTS public.team_collaboration
(
    collaboration_id serial NOT NULL,
    team_id integer,
    project_id integer,
    collaboration_type character varying(50) COLLATE pg_catalog."default",
    effectiveness_score numeric(5, 2),
    challenges text[] COLLATE pg_catalog."default",
    success_factors jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT team_collaboration_pkey PRIMARY KEY (collaboration_id)
);

CREATE TABLE IF NOT EXISTS public.team_dynamics
(
    dynamics_id serial NOT NULL,
    team_id integer,
    assessment_date date,
    collaboration_score numeric(5, 2),
    communication_score numeric(5, 2),
    innovation_score numeric(5, 2),
    conflict_resolution_score numeric(5, 2),
    team_metrics jsonb,
    interaction_patterns jsonb[],
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT team_dynamics_pkey PRIMARY KEY (dynamics_id)
);

CREATE TABLE IF NOT EXISTS public.team_structure
(
    team_id serial NOT NULL,
    team_name character varying(100) COLLATE pg_catalog."default",
    manager_id integer,
    department_id integer,
    team_type character varying(50) COLLATE pg_catalog."default",
    formation_date date,
    status character varying(50) COLLATE pg_catalog."default",
    team_metrics jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    team_size integer,
    team_level character varying(50) COLLATE pg_catalog."default",
    parent_team_id integer,
    team_objectives jsonb,
    budget_center character varying(100) COLLATE pg_catalog."default",
    last_modified_by integer,
    last_modified_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT team_structure_pkey PRIMARY KEY (team_id)
);

CREATE TABLE IF NOT EXISTS public.test_cases
(
    test_id bigserial NOT NULL,
    suite_id bigint,
    test_name text COLLATE pg_catalog."default" NOT NULL,
    test_query text COLLATE pg_catalog."default" NOT NULL,
    expected_result jsonb NOT NULL,
    timeout interval DEFAULT '00:00:30'::interval,
    retry_count integer DEFAULT 0,
    is_active boolean DEFAULT true,
    tags text[] COLLATE pg_catalog."default",
    CONSTRAINT test_cases_pkey PRIMARY KEY (test_id)
);

CREATE TABLE IF NOT EXISTS public.test_executions
(
    execution_id bigserial NOT NULL,
    test_id bigint,
    execution_start timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    execution_end timestamp without time zone,
    status text COLLATE pg_catalog."default" NOT NULL,
    actual_result jsonb,
    execution_details jsonb,
    CONSTRAINT test_executions_pkey PRIMARY KEY (execution_id)
);

CREATE TABLE IF NOT EXISTS public.test_suites
(
    suite_id bigserial NOT NULL,
    suite_name text COLLATE pg_catalog."default" NOT NULL,
    suite_type text COLLATE pg_catalog."default" NOT NULL,
    is_active boolean DEFAULT true,
    execution_order integer,
    dependencies jsonb,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT test_suites_pkey PRIMARY KEY (suite_id)
);

CREATE TABLE IF NOT EXISTS public.training_records
(
    training_id serial NOT NULL,
    employee_id integer,
    training_name character varying(100) COLLATE pg_catalog."default",
    category character varying(50) COLLATE pg_catalog."default",
    completion_date date,
    score numeric(5, 2),
    duration_hours integer,
    effectiveness_rating numeric(5, 2),
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT training_records_pkey PRIMARY KEY (training_id)
);

CREATE TABLE IF NOT EXISTS public.trend_analysis
(
    analysis_id serial NOT NULL,
    metric_type character varying(50) COLLATE pg_catalog."default",
    period_start date,
    period_end date,
    trend_direction character varying(20) COLLATE pg_catalog."default",
    change_percentage numeric(5, 2),
    contributing_factors jsonb,
    recommendations text COLLATE pg_catalog."default",
    CONSTRAINT trend_analysis_pkey PRIMARY KEY (analysis_id)
);

CREATE TABLE IF NOT EXISTS public.user_sessions
(
    session_id text COLLATE pg_catalog."default" NOT NULL,
    user_id integer,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    expires_at timestamp without time zone NOT NULL,
    is_valid boolean DEFAULT true,
    ip_address inet,
    user_agent text COLLATE pg_catalog."default",
    CONSTRAINT user_sessions_pkey PRIMARY KEY (session_id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    user_id serial NOT NULL,
    username character varying(50) COLLATE pg_catalog."default" NOT NULL,
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    password_hash text COLLATE pg_catalog."default" NOT NULL,
    salt text COLLATE pg_catalog."default" NOT NULL,
    role character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'user'::character varying,
    is_active boolean DEFAULT true,
    last_login timestamp without time zone,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT users_pkey PRIMARY KEY (user_id),
    CONSTRAINT users_email_key UNIQUE (email),
    CONSTRAINT users_username_key UNIQUE (username)
);

CREATE TABLE IF NOT EXISTS public.workflow_definitions
(
    workflow_id serial NOT NULL,
    workflow_name character varying(100) COLLATE pg_catalog."default",
    category character varying(50) COLLATE pg_catalog."default",
    steps jsonb[],
    approvers jsonb,
    sla_hours integer,
    active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    workflow_type character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT workflow_definitions_pkey PRIMARY KEY (workflow_id)
);

CREATE TABLE IF NOT EXISTS public.workflow_executions
(
    execution_id bigserial NOT NULL,
    workflow_id bigint,
    trigger_source text COLLATE pg_catalog."default" NOT NULL,
    started_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    completed_at timestamp without time zone,
    status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'RUNNING'::text,
    execution_data jsonb,
    error_details jsonb,
    CONSTRAINT workflow_executions_pkey PRIMARY KEY (execution_id)
);

CREATE TABLE IF NOT EXISTS public.workflow_instances
(
    instance_id serial NOT NULL,
    workflow_id integer,
    initiator_id integer,
    current_step integer,
    status character varying(50) COLLATE pg_catalog."default",
    start_date timestamp without time zone,
    completion_date timestamp without time zone,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    priority character varying(20) COLLATE pg_catalog."default" DEFAULT 'medium'::character varying,
    due_date timestamp without time zone,
    last_action_date timestamp without time zone,
    current_assignee integer,
    escalation_level integer DEFAULT 0,
    workflow_data jsonb,
    step_history jsonb[],
    last_modified_by integer,
    last_modified_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT workflow_instances_pkey PRIMARY KEY (instance_id)
);

CREATE TABLE IF NOT EXISTS public.workflow_step_history
(
    history_id serial NOT NULL,
    instance_id integer,
    step_number integer,
    step_name character varying(100) COLLATE pg_catalog."default",
    assignee_id integer,
    action_taken character varying(50) COLLATE pg_catalog."default",
    action_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    comments text COLLATE pg_catalog."default",
    time_spent interval,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT workflow_step_history_pkey PRIMARY KEY (history_id)
);

CREATE TABLE IF NOT EXISTS public.workflow_step_logs
(
    log_id bigserial NOT NULL,
    execution_id bigint,
    step_number integer NOT NULL,
    step_name text COLLATE pg_catalog."default" NOT NULL,
    started_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    completed_at timestamp without time zone,
    status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'RUNNING'::text,
    output_data jsonb,
    error_details jsonb,
    CONSTRAINT workflow_step_logs_pkey PRIMARY KEY (log_id)
);

ALTER TABLE IF EXISTS public.achievement_badges
    ADD CONSTRAINT achievement_badges_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.action_items
    ADD CONSTRAINT action_items_assigned_by_fkey FOREIGN KEY (assigned_by)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.action_items
    ADD CONSTRAINT action_items_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.alert_notifications
    ADD CONSTRAINT alert_notifications_alert_id_fkey FOREIGN KEY (alert_id)
    REFERENCES public.metric_alerts (alert_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.alert_notifications
    ADD CONSTRAINT alert_notifications_recipient_id_fkey FOREIGN KEY (recipient_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.api_requests
    ADD CONSTRAINT api_requests_api_key_id_fkey FOREIGN KEY (api_key_id)
    REFERENCES public.api_keys (key_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.api_requests
    ADD CONSTRAINT api_requests_endpoint_id_fkey FOREIGN KEY (endpoint_id)
    REFERENCES public.api_endpoints (endpoint_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.audit_log
    ADD CONSTRAINT audit_log_performed_by_fkey FOREIGN KEY (performed_by)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.backup_files
    ADD CONSTRAINT backup_files_backup_id_fkey FOREIGN KEY (backup_id)
    REFERENCES public.backup_history (backup_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.backup_history
    ADD CONSTRAINT backup_history_config_id_fkey FOREIGN KEY (config_id)
    REFERENCES public.backup_configurations (config_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.backup_verification_log
    ADD CONSTRAINT backup_verification_log_backup_id_fkey FOREIGN KEY (backup_id)
    REFERENCES public.backup_catalog (backup_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.capacity_planning
    ADD CONSTRAINT capacity_planning_team_id_fkey FOREIGN KEY (team_id)
    REFERENCES public.team_structure (team_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.career_development_plans
    ADD CONSTRAINT career_development_plans_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.career_progression
    ADD CONSTRAINT career_progression_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_career_progression_employee
    ON public.career_progression(employee_id);


ALTER TABLE IF EXISTS public.certification_registry
    ADD CONSTRAINT certification_registry_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.communication_log
    ADD CONSTRAINT communication_log_recipient_id_fkey FOREIGN KEY (recipient_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.communication_log
    ADD CONSTRAINT communication_log_template_id_fkey FOREIGN KEY (template_id)
    REFERENCES public.communication_templates (template_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.communication_metrics
    ADD CONSTRAINT communication_metrics_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.configuration_history
    ADD CONSTRAINT configuration_history_config_id_fkey FOREIGN KEY (config_id)
    REFERENCES public.system_configurations (config_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.customer_success_metrics
    ADD CONSTRAINT customer_success_metrics_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.department
    ADD CONSTRAINT department_parent_department_id_fkey FOREIGN KEY (parent_department_id)
    REFERENCES public.department (department_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.deployment_steps
    ADD CONSTRAINT deployment_steps_deployment_id_fkey FOREIGN KEY (deployment_id)
    REFERENCES public.deployments (deployment_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.employee_achievements
    ADD CONSTRAINT employee_achievements_achievement_id_fkey FOREIGN KEY (achievement_id)
    REFERENCES public.achievement_tracking (achievement_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.employee_achievements
    ADD CONSTRAINT employee_achievements_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.employee_goals
    ADD CONSTRAINT employee_goals_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.employee_goals
    ADD CONSTRAINT employee_goals_period_id_fkey FOREIGN KEY (period_id)
    REFERENCES public.evaluation_periods (period_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.employee_manager_hierarchy
    ADD CONSTRAINT employee_manager_hierarchy_manager_id_fkey FOREIGN KEY (manager_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.employee_recognition
    ADD CONSTRAINT employee_recognition_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.employee_recognition
    ADD CONSTRAINT employee_recognition_recognizer_id_fkey FOREIGN KEY (recognizer_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.employee_risk_assessment
    ADD CONSTRAINT employee_risk_assessment_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.enablement_points_tracking
    ADD CONSTRAINT enablement_points_tracking_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.evaluation_submissions
    ADD CONSTRAINT evaluation_submissions_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.evaluation_submissions
    ADD CONSTRAINT evaluation_submissions_period_id_fkey FOREIGN KEY (period_id)
    REFERENCES public.evaluation_periods (period_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.feedback_actions
    ADD CONSTRAINT feedback_actions_assigned_to_fkey FOREIGN KEY (assigned_to)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.feedback_actions
    ADD CONSTRAINT feedback_actions_suggestion_id_fkey FOREIGN KEY (suggestion_id)
    REFERENCES public.improvement_suggestions (suggestion_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.goal_achievement_metrics
    ADD CONSTRAINT goal_achievement_metrics_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.goal_dependencies
    ADD CONSTRAINT goal_dependencies_dependent_goal_id_fkey FOREIGN KEY (dependent_goal_id)
    REFERENCES public.employee_goals (goal_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.goal_dependencies
    ADD CONSTRAINT goal_dependencies_goal_id_fkey FOREIGN KEY (goal_id)
    REFERENCES public.employee_goals (goal_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.goal_milestones
    ADD CONSTRAINT goal_milestones_goal_id_fkey FOREIGN KEY (goal_id)
    REFERENCES public.employee_goals (goal_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.goal_reviews
    ADD CONSTRAINT goal_reviews_goal_id_fkey FOREIGN KEY (goal_id)
    REFERENCES public.employee_goals (goal_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.goal_reviews
    ADD CONSTRAINT goal_reviews_reviewer_id_fkey FOREIGN KEY (reviewer_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.improvement_initiatives
    ADD CONSTRAINT improvement_initiatives_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.improvement_suggestions
    ADD CONSTRAINT improvement_suggestions_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.job_executions
    ADD CONSTRAINT job_executions_job_id_fkey FOREIGN KEY (job_id)
    REFERENCES public.scheduled_jobs (job_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.knowledge_transfer
    ADD CONSTRAINT knowledge_transfer_source_employee_id_fkey FOREIGN KEY (source_employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.knowledge_transfer
    ADD CONSTRAINT knowledge_transfer_target_employee_id_fkey FOREIGN KEY (target_employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.learning_paths
    ADD CONSTRAINT learning_paths_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.maintenance_history
    ADD CONSTRAINT maintenance_history_schedule_id_fkey FOREIGN KEY (schedule_id)
    REFERENCES public.maintenance_schedule (schedule_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.manager
    ADD CONSTRAINT manager_department_id_fkey FOREIGN KEY (department_id)
    REFERENCES public.department (department_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_manager_dept
    ON public.manager(department_id);


ALTER TABLE IF EXISTS public.manager
    ADD CONSTRAINT manager_manager_id_fkey FOREIGN KEY (manager_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS manager_pkey
    ON public.manager(manager_id);


ALTER TABLE IF EXISTS public.manager_engagement_metrics
    ADD CONSTRAINT manager_engagement_metrics_manager_id_fkey FOREIGN KEY (manager_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.mentorship_interactions
    ADD CONSTRAINT mentorship_interactions_match_id_fkey FOREIGN KEY (match_id)
    REFERENCES public.mentorship_matching (match_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.mentorship_matching
    ADD CONSTRAINT mentorship_matching_mentee_id_fkey FOREIGN KEY (mentee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.mentorship_matching
    ADD CONSTRAINT mentorship_matching_mentor_id_fkey FOREIGN KEY (mentor_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.mentorship_programs
    ADD CONSTRAINT mentorship_programs_mentee_id_fkey FOREIGN KEY (mentee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.mentorship_programs
    ADD CONSTRAINT mentorship_programs_mentor_id_fkey FOREIGN KEY (mentor_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.notification_history
    ADD CONSTRAINT notification_history_channel_id_fkey FOREIGN KEY (channel_id)
    REFERENCES public.notification_channels (channel_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.notification_history
    ADD CONSTRAINT notification_history_template_id_fkey FOREIGN KEY (template_id)
    REFERENCES public.notification_templates (template_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.notification_log
    ADD CONSTRAINT notification_log_recipient_id_fkey FOREIGN KEY (recipient_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.notification_templates
    ADD CONSTRAINT notification_templates_last_modified_by_fkey FOREIGN KEY (last_modified_by)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.operational_efficiency_metrics
    ADD CONSTRAINT operational_efficiency_metrics_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.opt_in_tracking
    ADD CONSTRAINT opt_in_tracking_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.performance_delta_tracking
    ADD CONSTRAINT performance_delta_tracking_approved_by_fkey FOREIGN KEY (approved_by)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.performance_delta_tracking
    ADD CONSTRAINT performance_delta_tracking_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.performance_feedback
    ADD CONSTRAINT performance_feedback_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.performance_feedback
    ADD CONSTRAINT performance_feedback_provider_id_fkey FOREIGN KEY (provider_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.performance_impact
    ADD CONSTRAINT performance_impact_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.performance_improvement_metrics
    ADD CONSTRAINT performance_improvement_metrics_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.performance_improvements
    ADD CONSTRAINT performance_improvements_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.performance_metrics
    ADD CONSTRAINT performance_metrics_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.portfolio_base
    ADD CONSTRAINT portfolio_base_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_portfolio_employee
    ON public.portfolio_base(employee_id);


ALTER TABLE IF EXISTS public.portfolio_brownfield
    ADD CONSTRAINT portfolio_brownfield_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.portfolio_brownfield
    ADD CONSTRAINT portfolio_brownfield_last_modified_by_fkey FOREIGN KEY (last_modified_by)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.portfolio_cloud_services
    ADD CONSTRAINT portfolio_cloud_services_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.portfolio_cloud_services
    ADD CONSTRAINT portfolio_cloud_services_last_modified_by_fkey FOREIGN KEY (last_modified_by)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.portfolio_design_success
    ADD CONSTRAINT portfolio_design_success_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.portfolio_design_success
    ADD CONSTRAINT portfolio_design_success_last_modified_by_fkey FOREIGN KEY (last_modified_by)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.portfolio_preferred_success
    ADD CONSTRAINT portfolio_preferred_success_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.portfolio_preferred_success
    ADD CONSTRAINT portfolio_preferred_success_last_modified_by_fkey FOREIGN KEY (last_modified_by)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.portfolio_premium_engagement
    ADD CONSTRAINT portfolio_premium_engagement_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.portfolio_premium_engagement
    ADD CONSTRAINT portfolio_premium_engagement_last_modified_by_fkey FOREIGN KEY (last_modified_by)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.portfolio_training
    ADD CONSTRAINT portfolio_training_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_portfolio_training_employee
    ON public.portfolio_training(employee_id);


ALTER TABLE IF EXISTS public.project_assignments
    ADD CONSTRAINT project_assignments_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.project_assignments
    ADD CONSTRAINT project_assignments_last_modified_by_fkey FOREIGN KEY (last_modified_by)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.relationship_assessment
    ADD CONSTRAINT relationship_assessment_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.relationship_improvement_metrics
    ADD CONSTRAINT relationship_improvement_metrics_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.report_executions
    ADD CONSTRAINT report_executions_report_id_fkey FOREIGN KEY (report_id)
    REFERENCES public.report_definitions (report_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.report_history
    ADD CONSTRAINT report_history_template_id_fkey FOREIGN KEY (template_id)
    REFERENCES public.report_templates (template_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.resource_allocation
    ADD CONSTRAINT resource_allocation_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.resource_allocation
    ADD CONSTRAINT resource_allocation_last_modified_by_fkey FOREIGN KEY (last_modified_by)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.resource_allocation_history
    ADD CONSTRAINT resource_allocation_history_allocation_id_fkey FOREIGN KEY (allocation_id)
    REFERENCES public.resource_allocation (allocation_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.resource_allocation_history
    ADD CONSTRAINT resource_allocation_history_changed_by_fkey FOREIGN KEY (changed_by)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.resource_allocation_history
    ADD CONSTRAINT resource_allocation_history_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.schema_versions
    ADD CONSTRAINT schema_versions_deployment_id_fkey FOREIGN KEY (deployment_id)
    REFERENCES public.deployments (deployment_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.score_history
    ADD CONSTRAINT score_history_changed_by_fkey FOREIGN KEY (changed_by)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.score_history
    ADD CONSTRAINT score_history_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.skills_inventory
    ADD CONSTRAINT skills_inventory_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.stakeholder_relationship_history
    ADD CONSTRAINT stakeholder_relationship_history_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.system_settings
    ADD CONSTRAINT system_settings_modified_by_fkey FOREIGN KEY (modified_by)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.team_collaboration
    ADD CONSTRAINT team_collaboration_team_id_fkey FOREIGN KEY (team_id)
    REFERENCES public.team_structure (team_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.team_structure
    ADD CONSTRAINT team_structure_department_id_fkey FOREIGN KEY (department_id)
    REFERENCES public.department (department_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.team_structure
    ADD CONSTRAINT team_structure_last_modified_by_fkey FOREIGN KEY (last_modified_by)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.team_structure
    ADD CONSTRAINT team_structure_manager_id_fkey FOREIGN KEY (manager_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.team_structure
    ADD CONSTRAINT team_structure_parent_team_id_fkey FOREIGN KEY (parent_team_id)
    REFERENCES public.team_structure (team_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.test_cases
    ADD CONSTRAINT test_cases_suite_id_fkey FOREIGN KEY (suite_id)
    REFERENCES public.test_suites (suite_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.test_executions
    ADD CONSTRAINT test_executions_test_id_fkey FOREIGN KEY (test_id)
    REFERENCES public.test_cases (test_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.training_records
    ADD CONSTRAINT training_records_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.user_sessions
    ADD CONSTRAINT fk_user FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.workflow_executions
    ADD CONSTRAINT workflow_executions_workflow_id_fkey FOREIGN KEY (workflow_id)
    REFERENCES public.automation_workflows (workflow_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.workflow_instances
    ADD CONSTRAINT workflow_instances_current_assignee_fkey FOREIGN KEY (current_assignee)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.workflow_instances
    ADD CONSTRAINT workflow_instances_initiator_id_fkey FOREIGN KEY (initiator_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.workflow_instances
    ADD CONSTRAINT workflow_instances_last_modified_by_fkey FOREIGN KEY (last_modified_by)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.workflow_instances
    ADD CONSTRAINT workflow_instances_workflow_id_fkey FOREIGN KEY (workflow_id)
    REFERENCES public.workflow_definitions (workflow_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.workflow_step_history
    ADD CONSTRAINT workflow_step_history_assignee_id_fkey FOREIGN KEY (assignee_id)
    REFERENCES public.employee_manager_hierarchy (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.workflow_step_history
    ADD CONSTRAINT workflow_step_history_instance_id_fkey FOREIGN KEY (instance_id)
    REFERENCES public.workflow_instances (instance_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.workflow_step_logs
    ADD CONSTRAINT workflow_step_logs_execution_id_fkey FOREIGN KEY (execution_id)
    REFERENCES public.workflow_executions (execution_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;